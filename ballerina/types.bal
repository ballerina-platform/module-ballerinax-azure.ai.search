// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# Defines options to control Cross-Origin Resource Sharing (CORS) for an index.
public type CorsOptions record {
    # The list of origins from which JavaScript code will be granted access to your index. Can contain a list of hosts of the form {protocol}://{fully-qualified-domain-name}[:{port#}], or a single '*' to allow all origins (not recommended).
    string[] allowedOrigins;
    # The duration for which browsers should cache CORS preflight responses. Defaults to 5 minutes.
    int? maxAgeInSeconds?;
};

# Definition of additional projections to azure blob, table, or files, of enriched data.
public type SearchIndexerKnowledgeStore record {
    # The connection string to the storage account projections will be stored in.
    string storageConnectionString;
    # A list of additional projections to perform during indexing.
    SearchIndexerKnowledgeStoreProjection[] projections;
};

# Base type for similarity algorithms. Similarity algorithms are used to calculate scores that tie queries to documents. The higher the score, the more relevant the document is to that specific query. Those scores are used to rank the search results.
public type Similarity record {
    string \@odata\.type;
};

# The result of testing an analyzer on text.
public type AnalyzeResult record {
    # The list of tokens returned by the analyzer specified in the request.
    AnalyzedTokenInfo[] tokens;
};

# Response from a List Indexers request. If successful, it includes the full definitions of all indexers.
public type ListIndexersResult record {
    # The indexers in the Search service.
    SearchIndexer[] value;
};

# Represents credentials that can be used to connect to a datasource.
public type DataSourceCredentials record {
    # The connection string for the datasource. For Azure SQL, Azure Blob, ADLS Gen 2 and Azure Table, this would be the connection string or resource ID if using managed identity. For CosmosDB this would be a formatted connection string specifying ApiKind or resource ID for managed identity. For Onelake files, connection string would be either the workspace guid or workspace FQDN; Onelake only supports managed identity connections. Set to `<unchanged>` (with brackets) if you don't want the connection string updated. Set to `<redacted>` if you want to remove the connection string value from the datasource.
    string connectionString?;
};

# Defines the data type of a field in a search index.
public type SearchFieldDataType "Edm.String"|"Edm.Int32"|"Edm.Int64"|"Edm.Double"|"Edm.Boolean"|"Edm.DateTimeOffset"|"Edm.GeographyPoint"|"Edm.ComplexType"|"Edm.Single"|"Edm.Half"|"Edm.Int16"|"Edm.SByte"|"Edm.Byte"|"Collection(Edm.Single)"|"Collection(Edm.Half)"|"Collection(Edm.SByte)"|"Collection(Edm.Int16)"|"Collection(Edm.Byte)";

# Defines the function used to interpolate score boosting across a range of documents.
public type ScoringFunctionInterpolation "linear"|"constant"|"quadratic"|"logarithmic";

# Represents the Headers record for the operation: dataSourcesCreate
public type DataSourcesCreateHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Headers record for the operation: indexesList
public type IndexesListHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Defines the names of all text analyzers supported by the search engine.
public type LexicalAnalyzerName "ar.microsoft"|"ar.lucene"|"hy.lucene"|"bn.microsoft"|"eu.lucene"|"bg.microsoft"|"bg.lucene"|"ca.microsoft"|"ca.lucene"|"zh-Hans.microsoft"|"zh-Hans.lucene"|"zh-Hant.microsoft"|"zh-Hant.lucene"|"hr.microsoft"|"cs.microsoft"|"cs.lucene"|"da.microsoft"|"da.lucene"|"nl.microsoft"|"nl.lucene"|"en.microsoft"|"en.lucene"|"et.microsoft"|"fi.microsoft"|"fi.lucene"|"fr.microsoft"|"fr.lucene"|"gl.lucene"|"de.microsoft"|"de.lucene"|"el.microsoft"|"el.lucene"|"gu.microsoft"|"he.microsoft"|"hi.microsoft"|"hi.lucene"|"hu.microsoft"|"hu.lucene"|"is.microsoft"|"id.microsoft"|"id.lucene"|"ga.lucene"|"it.microsoft"|"it.lucene"|"ja.microsoft"|"ja.lucene"|"kn.microsoft"|"ko.microsoft"|"ko.lucene"|"lv.microsoft"|"lv.lucene"|"lt.microsoft"|"ml.microsoft"|"ms.microsoft"|"mr.microsoft"|"nb.microsoft"|"no.lucene"|"fa.lucene"|"pl.microsoft"|"pl.lucene"|"pt-BR.microsoft"|"pt-BR.lucene"|"pt-PT.microsoft"|"pt-PT.lucene"|"pa.microsoft"|"ro.microsoft"|"ro.lucene"|"ru.microsoft"|"ru.lucene"|"sr-cyrillic.microsoft"|"sr-latin.microsoft"|"sk.microsoft"|"sl.microsoft"|"es.microsoft"|"es.lucene"|"sv.microsoft"|"sv.lucene"|"ta.microsoft"|"te.microsoft"|"th.microsoft"|"th.lucene"|"tr.microsoft"|"tr.lucene"|"uk.microsoft"|"ur.microsoft"|"vi.microsoft"|"standard.lucene"|"standardasciifolding.lucene"|"keyword"|"pattern"|"simple"|"stop"|"whitespace";

# Represents the Queries record for the operation: indexesGet
public type IndexesGetQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Queries record for the operation: indexersCreateOrUpdate
public type IndexersCreateOrUpdateQueries record {
    # Client Api Version.
    string api\-version;
};

# Defines behavior of the index projections in relation to the rest of the indexer.
public type IndexProjectionMode "skipIndexingParentDocuments"|"includeIndexingParentDocuments";

# A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be used to encrypt or decrypt data-at-rest, such as indexes and synonym maps.
public type SearchResourceEncryptionKey record {
    # The name of your Azure Key Vault key to be used to encrypt your data at rest.
    string keyVaultKeyName;
    # The version of your Azure Key Vault key to be used to encrypt your data at rest.
    string keyVaultKeyVersion;
    # The URI of your Azure Key Vault, also referred to as DNS name, that contains the key to be used to encrypt your data at rest. An example URI might be `https://my-keyvault-name.vault.azure.net`.
    string keyVaultUri;
    # Credentials of a registered application created for your search service, used for authenticated access to the encryption keys stored in Azure Key Vault.
    AzureActiveDirectoryApplicationCredentials accessCredentials?;
};

# Represents the overall indexer status.
public type IndexerStatus "unknown"|"error"|"running";

# Represents the Queries record for the operation: synonymMapsDelete
public type SynonymMapsDeleteQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Queries record for the operation: indexersDelete
public type IndexersDeleteQueries record {
    # Client Api Version.
    string api\-version;
};

# Defines the names of all tokenizers supported by the search engine.
public type LexicalTokenizerName "classic"|"edgeNGram"|"keyword_v2"|"letter"|"lowercase"|"microsoft_language_tokenizer"|"microsoft_language_stemming_tokenizer"|"nGram"|"path_hierarchy_v2"|"pattern"|"standard_v2"|"uax_url_email"|"whitespace";

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Base type for token filters.
public type TokenFilter record {
    # A URI fragment specifying the type of token filter.
    string \@odata\.type;
    # The name of the token filter. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters.
    string name;
};

# Defines a combination of configurations to use with vector search.
public type VectorSearchProfile record {
    # The name to associate with this particular vector search profile.
    string name;
    # The name of the vector search algorithm configuration that specifies the algorithm and optional parameters.
    string algorithm;
    # The name of the vectorization being configured for use with vector search.
    string vectorizer?;
    # The name of the compression method configuration that specifies the compression method and optional parameters.
    string compression?;
};

public type SearchIndexerLimits record {
    # The maximum duration that the indexer is permitted to run for one execution.
    string maxRunTime?;
    # The maximum size of a document, in bytes, which will be considered valid for indexing.
    decimal maxDocumentExtractionSize?;
    # The maximum number of characters that will be extracted from a document picked up for indexing.
    decimal maxDocumentContentCharactersToExtract?;
};

# Represents the Queries record for the operation: indexersGetStatus
public type IndexersGetStatusQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Queries record for the operation: synonymMapsList
public type SynonymMapsListQueries record {
    # Client Api Version.
    string api\-version;
    # Selects which top-level properties of the synonym maps to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.
    string \$select?;
};

# Determines algorithm for text extraction from PDF files in Azure blob storage.
public type PdfTextRotationAlgorithm "none"|"detectAngles";

# Represents the Headers record for the operation: dataSourcesCreateOrUpdate
public type DataSourcesCreateOrUpdateHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # For HTTP PUT requests, instructs the service to return the created/updated resource on success.
    "return=representation" Prefer;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# A field that is used as part of the semantic configuration.
public type SemanticField record {
    string fieldName;
};

# Base type for normalizers.
public type LexicalNormalizer record {
    # A URI fragment specifying the type of normalizer.
    string \@odata\.type;
    # The name of the normalizer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters. It cannot end in '.microsoft' nor '.lucene', nor be named 'asciifolding', 'standard', 'lowercase', 'uppercase', or 'elision'.
    string name;
};

# Represents the Headers record for the operation: synonymMapsCreate
public type SynonymMapsCreateHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Headers record for the operation: dataSourcesGet
public type DataSourcesGetHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Description for what data to store in Azure Tables.
public type SearchIndexerKnowledgeStoreTableProjectionSelector SearchIndexerKnowledgeStoreProjectionSelector;

# Represents the Queries record for the operation: skillsetsDelete
public type SkillsetsDeleteQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Queries record for the operation: dataSourcesCreateOrUpdate
public type DataSourcesCreateOrUpdateQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Headers record for the operation: synonymMapsList
public type SynonymMapsListHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the result of an individual indexer execution.
public type IndexerExecutionResult record {
    # Represents the status of an individual indexer execution.
    IndexerExecutionStatus status;
    # The error message indicating the top-level error, if any.
    string errorMessage?;
    # The start time of this indexer execution.
    string startTime?;
    # The end time of this indexer execution, if the execution has already completed.
    string? endTime?;
    # The item-level indexing errors.
    SearchIndexerError[] errors;
    # The item-level indexing warnings.
    SearchIndexerWarning[] warnings;
    # The number of items that were processed during this indexer execution. This includes both successfully processed items and items where indexing was attempted but failed.
    int:Signed32 itemsProcessed;
    # The number of items that failed to be indexed during this indexer execution.
    int:Signed32 itemsFailed;
    # Change tracking state with which an indexer execution started.
    string initialTrackingState?;
    # Change tracking state with which an indexer execution finished.
    string finalTrackingState?;
};

# Contains configuration options related to vector search.
public type VectorSearch record {
    # Defines combinations of configurations to use with vector search.
    VectorSearchProfile[] profiles?;
    # Contains configuration options specific to the algorithm used during indexing or querying.
    VectorSearchAlgorithmConfiguration[] algorithms?;
    # Contains configuration options on how to vectorize text vector queries.
    VectorSearchVectorizer[] vectorizers?;
    # Contains configuration options specific to the compression method used during indexing or querying.
    VectorSearchCompressionConfiguration[] compressions?;
};

# Represents the Queries record for the operation: dataSourcesDelete
public type DataSourcesDeleteQueries record {
    # Client Api Version.
    string api\-version;
};

# A dictionary of indexer-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type.
public type IndexingParametersConfiguration record {
    # Represents the parsing mode for indexing from an Azure blob data source.
    ParsingMode parsingMode?;
    # Comma-delimited list of filename extensions to ignore when processing from Azure blob storage.  For example, you could exclude ".png, .mp4" to skip over those files during indexing.
    string excludedFileNameExtensions = "";
    # Comma-delimited list of filename extensions to select when processing from Azure blob storage.  For example, you could focus indexing on specific application files ".docx, .pptx, .msg" to specifically include those file types.
    string indexedFileNameExtensions = "";
    # For Azure blobs, set to false if you want to continue indexing when an unsupported content type is encountered, and you don't know all the content types (file extensions) in advance.
    boolean failOnUnsupportedContentType = false;
    # For Azure blobs, set to false if you want to continue indexing if a document fails indexing.
    boolean failOnUnprocessableDocument = false;
    # For Azure blobs, set this property to true to still index storage metadata for blob content that is too large to process. Oversized blobs are treated as errors by default. For limits on blob size, see https://learn.microsoft.com/azure/search/search-limits-quotas-capacity.
    boolean indexStorageMetadataOnlyForOversizedDocuments = false;
    # For CSV blobs, specifies a comma-delimited list of column headers, useful for mapping source fields to destination fields in an index.
    string delimitedTextHeaders?;
    # For CSV blobs, specifies the end-of-line single-character delimiter for CSV files where each line starts a new document (for example, "|").
    string delimitedTextDelimiter?;
    # For CSV blobs, indicates that the first (non-blank) line of each blob contains headers.
    boolean firstLineContainsHeaders = true;
    # For JSON arrays, given a structured or semi-structured document, you can specify a path to the array using this property.
    string documentRoot?;
    # Specifies the data to extract from Azure blob storage and tells the indexer which data to extract from image content when "imageAction" is set to a value other than "none".  This applies to embedded image content in a .PDF or other application, or image files such as .jpg and .png, in Azure blobs.
    DataToExtract dataToExtract?;
    # Determines how to process embedded images and image files in Azure blob storage.  Setting the "imageAction" configuration to any value other than "none" requires that a skillset also be attached to that indexer.
    ImageAction imageAction?;
    # If true, will create a path //document//file_data that is an object representing the original file data downloaded from your blob data source.  This allows you to pass the original file data to a custom skill for processing within the enrichment pipeline, or to the Document Extraction skill.
    boolean allowSkillsetToReadFileData = false;
    # Determines algorithm for text extraction from PDF files in Azure blob storage.
    PdfTextRotationAlgorithm pdfTextRotationAlgorithm?;
    # Specifies the environment in which the indexer should execute.
    ExecutionEnvironment executionEnvironment?;
    # Increases the timeout beyond the 5-minute default for Azure SQL database data sources, specified in the format "hh:mm:ss".
    string queryTimeout?;
};

# Represents the Headers record for the operation: indexesCreate
public type IndexesCreateHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents a schedule for indexer execution.
public type IndexingSchedule record {
    # The interval of time between indexer executions.
    string interval;
    # The time when an indexer should start running.
    string startTime?;
};

# Determines how to process embedded images and image files in Azure blob storage.  Setting the "imageAction" configuration to any value other than "none" requires that a skillset also be attached to that indexer.
public type ImageAction "none"|"generateNormalizedImages"|"generateNormalizedImagePerPage";

# Response from a List Datasources request. If successful, it includes the full definitions of all datasources.
public type ListDataSourcesResult record {
    # The datasources in the Search service.
    SearchIndexerDataSource[] value;
};

# Represents the Headers record for the operation: indexersGetStatus
public type IndexersGetStatusHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Response from a List Indexes request. If successful, it includes the full definitions of all indexes.
public type ListIndexesResult record {
    # The indexes in the Search service.
    SearchIndex[] value;
};

# Represents the Queries record for the operation: indexesCreateOrUpdate
public type IndexesCreateOrUpdateQueries record {
    # Client Api Version.
    string api\-version;
    # Allows new analyzers, tokenizers, token filters, or char filters to be added to an index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests to fail. Performance and write availability of the index can be impaired for several minutes after the index is updated, or longer for very large indexes.
    boolean allowIndexDowntime?;
};

# Base type for functions that can modify document scores during ranking.
public type ScoringFunction record {
    # Indicates the type of function to use. Valid values include magnitude, freshness, distance, and tag. The function type must be lower case.
    string 'type;
    # The name of the field used as input to the scoring function.
    string fieldName;
    # A multiplier for the raw score. Must be a positive number not equal to 1.0.
    decimal boost;
    # Defines the function used to interpolate score boosting across a range of documents.
    ScoringFunctionInterpolation interpolation?;
};

# Represents the Queries record for the operation: dataSourcesCreate
public type DataSourcesCreateQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Headers record for the operation: indexersCreateOrUpdate
public type IndexersCreateOrUpdateHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # For HTTP PUT requests, instructs the service to return the created/updated resource on success.
    "return=representation" Prefer;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Base type for data deletion detection policies.
public type DataDeletionDetectionPolicy record {
    # A URI fragment specifying the type of data deletion detection policy.
    string \@odata\.type;
};

# Represents the Queries record for the operation: indexesCreate
public type IndexesCreateQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Headers record for the operation: indexersGet
public type IndexersGetHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Queries record for the operation: skillsetsCreateOrUpdate
public type SkillsetsCreateOrUpdateQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Queries record for the operation: indexesList
public type IndexesListQueries record {
    # Client Api Version.
    string api\-version;
    # Selects which top-level properties of the index definitions to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.
    string \$select?;
};

# Represents the Headers record for the operation: synonymMapsCreateOrUpdate
public type SynonymMapsCreateOrUpdateHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # For HTTP PUT requests, instructs the service to return the created/updated resource on success.
    "return=representation" Prefer;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Defines how the Suggest API should apply to a group of fields in the index.
public type Suggester record {
    # The name of the suggester.
    string name;
    # A value indicating the capabilities of the suggester.
    "analyzingInfixMatching" searchMode;
    # The list of field names to which the suggester applies. Each field must be searchable.
    string[] sourceFields;
};

# Definition of additional projections to secondary search indexes.
public type SearchIndexerIndexProjections record {
    # A list of projections to be performed to secondary search indexes.
    SearchIndexerIndexProjectionSelector[] selectors;
    # A dictionary of index projection-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type.
    SearchIndexerIndexProjectionsParameters parameters?;
};

# Defines the names of all token filters supported by the search engine.
public type TokenFilterName "arabic_normalization"|"apostrophe"|"asciifolding"|"cjk_bigram"|"cjk_width"|"classic"|"common_grams"|"edgeNGram_v2"|"elision"|"german_normalization"|"hindi_normalization"|"indic_normalization"|"keyword_repeat"|"kstem"|"length"|"limit"|"lowercase"|"nGram_v2"|"persian_normalization"|"phonetic"|"porter_stem"|"reverse"|"scandinavian_normalization"|"scandinavian_folding"|"shingle"|"snowball"|"sorani_normalization"|"stemmer"|"stopwords"|"trim"|"truncate"|"unique"|"uppercase"|"word_delimiter";

# Represents the current status and execution history of an indexer.
public type SearchIndexerStatus record {
    # The name of the indexer.
    string name;
    # Represents the overall indexer status.
    IndexerStatus status;
    # Represents the result of an individual indexer execution.
    IndexerExecutionResult lastResult?;
    # History of the recent indexer executions, sorted in reverse chronological order.
    IndexerExecutionResult[] executionHistory;
    SearchIndexerLimits limits;
};

# Defines weights on index fields for which matches should boost scoring in search queries.
public type TextWeights record {
    # The dictionary of per-field weights to boost document scoring. The keys are field names and the values are the weights for each field.
    record {|decimal...;|} weights;
};

# Represents the Queries record for the operation: indexesDelete
public type IndexesDeleteQueries record {
    # Client Api Version.
    string api\-version;
};

# Defines a specific configuration to be used in the context of semantic capabilities.
public type SemanticConfiguration record {
    # The name of the semantic configuration.
    string name;
    # Describes the title, content, and keywords fields to be used for semantic ranking, captions, highlights, and answers.
    PrioritizedFields prioritizedFields;
    # Represents score to use for sort order of documents.
    RankingOrder rankingOrder?;
};

# Represents the Headers record for the operation: skillsetsGet
public type SkillsetsGetHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Headers record for the operation: indexersCreate
public type IndexersCreateHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Headers record for the operation: getServiceStatistics
public type GetServiceStatisticsHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Specifies the vectorization method to be used during query time.
public type VectorSearchVectorizer record {
    # The name to associate with this particular vectorization method.
    string name;
    # The vectorization method to be used during query time.
    VectorSearchVectorizerKind kind;
};

# Represents a resource's usage and quota.
public type ResourceCounter record {
    # The resource usage amount.
    int usage;
    # The resource amount quota.
    int? quota?;
};

# Represents service-level resource counters and quotas.
public type ServiceCounters record {
    # Represents a resource's usage and quota.
    ResourceCounter documentCount;
    # Represents a resource's usage and quota.
    ResourceCounter indexesCount;
    # Represents a resource's usage and quota.
    ResourceCounter indexersCount;
    # Represents a resource's usage and quota.
    ResourceCounter dataSourcesCount;
    # Represents a resource's usage and quota.
    ResourceCounter storageSize;
    # Represents a resource's usage and quota.
    ResourceCounter synonymMaps;
    # Represents a resource's usage and quota.
    ResourceCounter skillsetCount;
    # Represents a resource's usage and quota.
    ResourceCounter vectorIndexSize;
};

# Represents the Headers record for the operation: indexesGetStatistics
public type IndexesGetStatisticsHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Queries record for the operation: indexersList
public type IndexersListQueries record {
    # Client Api Version.
    string api\-version;
    # Selects which top-level properties of the indexers to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.
    string \$select?;
};

# Defines the names of all text normalizers supported by the search engine.
public type LexicalNormalizerName "asciifolding"|"elision"|"lowercase"|"standard"|"uppercase";

# Output field mapping for a skill.
public type OutputFieldMappingEntry record {
    # The name of the output defined by the skill.
    string name;
    # The target name of the output. It is optional and default to name.
    string targetName?;
};

# The vectorization method to be used during query time.
public type VectorSearchVectorizerKind "azureOpenAI"|"customWebApi";

# Base type for data change detection policies.
public type DataChangeDetectionPolicy record {
    # A URI fragment specifying the type of data change detection policy.
    string \@odata\.type;
};

# Represents the Queries record for the operation: skillsetsCreate
public type SkillsetsCreateQueries record {
    # Client Api Version.
    string api\-version;
};

# Container object for various projection selectors.
public type SearchIndexerKnowledgeStoreProjection record {
    # Projections to Azure Table storage.
    SearchIndexerKnowledgeStoreTableProjectionSelector[] tables?;
    # Projections to Azure Blob storage.
    SearchIndexerKnowledgeStoreObjectProjectionSelector[] objects?;
    # Projections to Azure File storage.
    SearchIndexerKnowledgeStoreFileProjectionSelector[] files?;
};

# Represents the Queries record for the operation: dataSourcesList
public type DataSourcesListQueries record {
    # Client Api Version.
    string api\-version;
    # Selects which top-level properties of the data sources to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.
    string \$select?;
};

# Represents the Headers record for the operation: indexersReset
public type IndexersResetHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents a datasource definition, which can be used to configure an indexer.
public type SearchIndexerDataSource record {
    # The name of the datasource.
    string name;
    # The description of the datasource.
    string description?;
    # Defines the type of a datasource.
    SearchIndexerDataSourceType 'type;
    # Represents credentials that can be used to connect to a datasource.
    DataSourceCredentials credentials;
    # Represents information about the entity (such as Azure SQL table or CosmosDB collection) that will be indexed.
    SearchIndexerDataContainer container;
    # Base type for data change detection policies.
    DataChangeDetectionPolicy dataChangeDetectionPolicy?;
    # Base type for data deletion detection policies.
    DataDeletionDetectionPolicy dataDeletionDetectionPolicy?;
    # The ETag of the data source.
    string \@odata\.etag?;
    # A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be used to encrypt or decrypt data-at-rest, such as indexes and synonym maps.
    SearchResourceEncryptionKey encryptionKey?;
};

# Description for what data to store in the designated search index.
public type SearchIndexerIndexProjectionSelector record {
    # Name of the search index to project to. Must have a key field with the 'keyword' analyzer set.
    string targetIndexName;
    # Name of the field in the search index to map the parent document's key value to. Must be a string field that is filterable and not the key field.
    string parentKeyFieldName;
    # Source context for the projections. Represents the cardinality at which the document will be split into multiple sub documents.
    string sourceContext;
    # Mappings for the projection, or which source should be mapped to which field in the target index.
    InputFieldMappingEntry[] mappings;
};

# Represents the Queries record for the operation: synonymMapsGet
public type SynonymMapsGetQueries record {
    # Client Api Version.
    string api\-version;
};

# The compression method used for indexing and querying.
public type VectorSearchCompressionKind "scalarQuantization"|"binaryQuantization";

# Represents the Queries record for the operation: skillsetsList
public type SkillsetsListQueries record {
    # Client Api Version.
    string api\-version;
    # Selects which top-level properties of the skillsets to retrieve. Specified as a comma-separated list of JSON property names, or '*' for all properties. The default is all properties.
    string \$select?;
};

# Represents information about the entity (such as Azure SQL table or CosmosDB collection) that will be indexed.
public type SearchIndexerDataContainer record {
    # The name of the table or view (for Azure SQL datasource), collection (for CosmosDB datasource), container (for Azure Blob and ADLS Gen 2 datasources), Azure Table (for Azure Table datasource), or lakehouse (for Onelake datasource) that will be indexed.
    string name;
    # A query that is applied to this data container. For CosmosDB datasource query can flatten and filter data. For Azure Blob and ADLS Gen 2 query can filter by folders. For Azure Table query can filter by row data. For Onelake query can filter by folder or shortcut. Not supported by Azure SQL datasources.
    string query?;
};

# Represents the Queries record for the operation: synonymMapsCreateOrUpdate
public type SynonymMapsCreateOrUpdateQueries record {
    # Client Api Version.
    string api\-version;
};

# Describes the title, content, and keywords fields to be used for semantic ranking, captions, highlights, and answers.
public type PrioritizedFields record {
    # A field that is used as part of the semantic configuration.
    SemanticField titleField?;
    # Defines the content fields to be used for semantic ranking, captions, highlights, and answers. For the best result, the selected fields should contain text in natural language form. The order of the fields in the array represents their priority. Fields with lower priority may get truncated if the content is long.
    SemanticField[] prioritizedContentFields?;
    # Defines the keyword fields to be used for semantic ranking, captions, highlights, and answers. For the best result, the selected fields should contain a list of keywords. The order of the fields in the array represents their priority. Fields with lower priority may get truncated if the content is long.
    SemanticField[] prioritizedKeywordsFields?;
};

# Represents the Headers record for the operation: indexesCreateOrUpdate
public type IndexesCreateOrUpdateHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # For HTTP PUT requests, instructs the service to return the created/updated resource on success.
    "return=representation" Prefer;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Queries record for the operation: indexersGet
public type IndexersGetQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents score to use for sort order of documents.
public type RankingOrder "BoostedRerankerScore"|"RerankerScore";

# Represents the parsing mode for indexing from an Azure blob data source.
public type ParsingMode "default"|"text"|"delimitedText"|"json"|"jsonArray"|"jsonLines";

# Represents the status of an individual indexer execution.
public type IndexerExecutionStatus "transientFailure"|"success"|"inProgress"|"reset";

# Information about a token returned by an analyzer.
public type AnalyzedTokenInfo record {
    # The token returned by the analyzer.
    string token;
    # The index of the first character of the token in the input text.
    int:Signed32 startOffset;
    # The index of the last character of the token in the input text.
    int:Signed32 endOffset;
    # The position of the token in the input text relative to other tokens. The first token in the input text has position 0, the next has position 1, and so on. Depending on the analyzer used, some tokens might have the same position, for example if they are synonyms of each other.
    int:Signed32 position;
};

# The algorithm used for indexing and querying.
public type VectorSearchAlgorithmKind "hnsw"|"exhaustiveKnn";

# Represents the Headers record for the operation: skillsetsCreateOrUpdate
public type SkillsetsCreateOrUpdateHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # For HTTP PUT requests, instructs the service to return the created/updated resource on success.
    "return=representation" Prefer;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Projection definition for what data to store in Azure Blob.
public type SearchIndexerKnowledgeStoreObjectProjectionSelector SearchIndexerKnowledgeStoreBlobProjectionSelector;

# Defines the names of all character filters supported by the search engine.
public type CharFilterName "html_strip";

# A dictionary of index projection-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type.
public type SearchIndexerIndexProjectionsParameters record {
    # Defines behavior of the index projections in relation to the rest of the indexer.
    IndexProjectionMode projectionMode?;
};

# Represents the Queries record for the operation: indexersRun
public type IndexersRunQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Headers record for the operation: indexesDelete
public type IndexesDeleteHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Queries record for the operation: synonymMapsCreate
public type SynonymMapsCreateQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Queries record for the operation: indexesAnalyze
public type IndexesAnalyzeQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents parameters for indexer execution.
public type IndexingParameters record {
    # The number of items that are read from the data source and indexed as a single batch in order to improve performance. The default depends on the data source type.
    int:Signed32? batchSize?;
    # The maximum number of items that can fail indexing for indexer execution to still be considered successful. -1 means no limit. Default is 0.
    int:Signed32? maxFailedItems = 0;
    # The maximum number of items in a single batch that can fail indexing for the batch to still be considered successful. -1 means no limit. Default is 0.
    int:Signed32? maxFailedItemsPerBatch = 0;
    # A dictionary of indexer-specific configuration properties. Each name is the name of a specific property. Each value must be of a primitive type.
    IndexingParametersConfiguration configuration?;
};

# Defines parameters for a search index that influence scoring in search queries.
public type ScoringProfile record {
    # The name of the scoring profile.
    string name;
    # Defines weights on index fields for which matches should boost scoring in search queries.
    TextWeights text?;
    # The collection of functions that influence the scoring of documents.
    ScoringFunction[] functions?;
    # Defines the aggregation function used to combine the results of all the scoring functions in a scoring profile.
    ScoringFunctionAggregation functionAggregation?;
};

# The encoding format for interpreting vector field contents.
public type VectorEncodingFormat "packedBit";

# The storage method for the original full-precision vectors used for rescoring and internal index operations.
public type VectorSearchCompressionRescoreStorageMethod "preserveOriginals"|"discardOriginals";

# Represents the Queries record for the operation: dataSourcesGet
public type DataSourcesGetQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Headers record for the operation: skillsetsDelete
public type SkillsetsDeleteHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Base type for describing any Azure AI service resource attached to a skillset.
public type CognitiveServicesAccount record {
    # A URI fragment specifying the type of Azure AI service resource attached to a skillset.
    string \@odata\.type;
    # Description of the Azure AI service resource attached to a skillset.
    string description?;
};

# Represents the Headers record for the operation: indexesAnalyze
public type IndexesAnalyzeHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Contains the options for rescoring.
public type RescoringOptions record {
    # If set to true, after the initial search on the compressed vectors, the similarity scores are recalculated using the full-precision vectors. This will improve recall at the expense of latency.
    boolean? enableRescoring = true;
    # Default oversampling factor. Oversampling retrieves a greater set of potential documents to offset the resolution loss due to quantization. This increases the set of results that will be rescored on full-precision vectors. Minimum value is 1, meaning no oversampling (1x). This parameter can only be set when 'enableRescoring' is true. Higher values improve recall at the expense of latency.
    decimal? defaultOversampling?;
    # The storage method for the original full-precision vectors used for rescoring and internal index operations.
    VectorSearchCompressionRescoreStorageMethod rescoreStorageMethod?;
};

# Represents the Headers record for the operation: dataSourcesDelete
public type DataSourcesDeleteHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Response from a list skillset request. If successful, it includes the full definitions of all skillsets.
public type ListSkillsetsResult record {
    # The skillsets defined in the Search service.
    SearchIndexerSkillset[] value;
};

# Input field mapping for a skill.
public type InputFieldMappingEntry record {
    # The name of the input.
    string name;
    # The source of the input.
    string 'source?;
    # The source context used for selecting recursive inputs.
    string sourceContext?;
    # The recursive inputs used when creating a complex type.
    InputFieldMappingEntry[] inputs?;
};

# Abstract class to share properties between concrete selectors.
public type SearchIndexerKnowledgeStoreProjectionSelector record {
    # Name of reference key to different projection.
    string referenceKeyName?;
    # Name of generated key to store projection under.
    string generatedKeyName?;
    # Source data to project.
    string 'source?;
    # Source context for complex projections.
    string sourceContext?;
    # Nested inputs for complex projections.
    InputFieldMappingEntry[] inputs?;
};

# Represents the Headers record for the operation: synonymMapsGet
public type SynonymMapsGetHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Abstract class to share properties between concrete selectors.
public type SearchIndexerKnowledgeStoreBlobProjectionSelector SearchIndexerKnowledgeStoreProjectionSelector;

# Statistics for a given index. Statistics are collected periodically and are not guaranteed to always be up-to-date.
public type GetIndexStatisticsResult record {
    # The number of documents in the index.
    int documentCount;
    # The amount of storage in bytes consumed by the index.
    int storageSize;
    # The amount of memory in bytes consumed by vectors in the index.
    int vectorIndexSize;
};

# Represents an item-level warning.
public type SearchIndexerWarning record {
    # The key of the item which generated a warning.
    string 'key?;
    # The message describing the warning that occurred while processing the item.
    string message;
    # The name of the source at which the warning originated. For example, this could refer to a particular skill in the attached skillset. This may not be always available.
    string name?;
    # Additional, verbose details about the warning to assist in debugging the indexer. This may not be always available.
    string details?;
    # A link to a troubleshooting guide for these classes of warnings. This may not be always available.
    string documentationLink?;
};

# Specifies the environment in which the indexer should execute.
public type ExecutionEnvironment "standard"|"private";

# Defines the type of a datasource.
public type SearchIndexerDataSourceType "azuresql"|"cosmosdb"|"azureblob"|"azuretable"|"mysql"|"adlsgen2"|"onelake";

# Projection definition for what data to store in Azure Files.
public type SearchIndexerKnowledgeStoreFileProjectionSelector SearchIndexerKnowledgeStoreBlobProjectionSelector;

# Base type for character filters.
public type CharFilter record {
    # A URI fragment specifying the type of char filter.
    string \@odata\.type;
    # The name of the char filter. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters.
    string name;
};

# Represents the Headers record for the operation: skillsetsList
public type SkillsetsListHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Contains configuration options specific to the algorithm used during indexing or querying.
public type VectorSearchAlgorithmConfiguration record {
    # The name to associate with this particular configuration.
    string name;
    # The algorithm used for indexing and querying.
    VectorSearchAlgorithmKind kind;
};

# Defines a mapping between a field in a data source and a target field in an index.
public type FieldMapping record {
    # The name of the field in the data source.
    string sourceFieldName;
    # The name of the target field in the index. Same as the source field name by default.
    string targetFieldName?;
    # Represents a function that transforms a value from a data source before indexing.
    FieldMappingFunction mappingFunction?;
};

# Represents the Headers record for the operation: indexesGet
public type IndexesGetHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Specifies the data to extract from Azure blob storage and tells the indexer which data to extract from image content when "imageAction" is set to a value other than "none".  This applies to embedded image content in a .PDF or other application, or image files such as .jpg and .png, in Azure blobs.
public type DataToExtract "storageMetadata"|"allMetadata"|"contentAndMetadata";

# Represents a synonym map definition.
public type SynonymMap record {
    # The name of the synonym map.
    string name;
    # The format of the synonym map. Only the 'solr' format is currently supported.
    "solr" format;
    # A series of synonym rules in the specified synonym map format. The rules must be separated by newlines.
    string synonyms;
    # A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be used to encrypt or decrypt data-at-rest, such as indexes and synonym maps.
    SearchResourceEncryptionKey encryptionKey?;
    # The ETag of the synonym map.
    string \@odata\.etag?;
};

# Represents the Headers record for the operation: synonymMapsDelete
public type SynonymMapsDeleteHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Base type for analyzers.
public type LexicalAnalyzer record {
    # A URI fragment specifying the type of analyzer.
    string \@odata\.type;
    # The name of the analyzer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters.
    string name;
};

# Specifies some text and analysis components used to break that text into tokens.
public type AnalyzeRequest record {
    # The text to break into tokens.
    string text;
    # Defines the names of all text analyzers supported by the search engine.
    LexicalAnalyzerName analyzer?;
    # Defines the names of all tokenizers supported by the search engine.
    LexicalTokenizerName tokenizer?;
    # Defines the names of all text normalizers supported by the search engine.
    LexicalNormalizerName normalizer?;
    # An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter.
    TokenFilterName[] tokenFilters?;
    # An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter.
    CharFilterName[] charFilters?;
};

# Represents the Headers record for the operation: indexersDelete
public type IndexersDeleteHeaders record {
    # Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value.
    string If\-None\-Match?;
    # Defines the If-Match condition. The operation will be performed only if the ETag on the server matches this value.
    string If\-Match?;
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Headers record for the operation: indexersRun
public type IndexersRunHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Credentials of a registered application created for your search service, used for authenticated access to the encryption keys stored in Azure Key Vault.
public type AzureActiveDirectoryApplicationCredentials record {
    # An AAD Application ID that was granted the required access permissions to the Azure Key Vault that is to be used when encrypting your data at rest. The Application ID should not be confused with the Object ID for your AAD Application.
    string applicationId;
    # The authentication key of the specified AAD application.
    string applicationSecret?;
};

# Response from a List SynonymMaps request. If successful, it includes the full definitions of all synonym maps.
public type ListSynonymMapsResult record {
    # The synonym maps in the Search service.
    SynonymMap[] value;
};

# Defines the aggregation function used to combine the results of all the scoring functions in a scoring profile.
public type ScoringFunctionAggregation "sum"|"average"|"minimum"|"maximum"|"firstMatching";

# Represents the Headers record for the operation: indexersList
public type IndexersListHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents the Queries record for the operation: skillsetsGet
public type SkillsetsGetQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents various service level limits.
public type ServiceLimits record {
    # The maximum allowed fields per index.
    int:Signed32? maxFieldsPerIndex?;
    # The maximum depth which you can nest sub-fields in an index, including the top-level complex field. For example, a/b/c has a nesting depth of 3.
    int:Signed32? maxFieldNestingDepthPerIndex?;
    # The maximum number of fields of type Collection(Edm.ComplexType) allowed in an index.
    int:Signed32? maxComplexCollectionFieldsPerIndex?;
    # The maximum number of objects in complex collections allowed per document.
    int:Signed32? maxComplexObjectsInCollectionsPerDocument?;
    # The maximum amount of storage in bytes allowed per index.
    int? maxStoragePerIndex?;
};

# Represents an item- or document-level indexing error.
public type SearchIndexerError record {
    # The key of the item for which indexing failed.
    string 'key?;
    # The message describing the error that occurred while processing the item.
    string errorMessage;
    # The status code indicating why the indexing operation failed. Possible values include: 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.
    int:Signed32 statusCode;
    # The name of the source at which the error originated. For example, this could refer to a particular skill in the attached skillset. This may not be always available.
    string name?;
    # Additional, verbose details about the error to assist in debugging the indexer. This may not be always available.
    string details?;
    # A link to a troubleshooting guide for these classes of errors. This may not be always available.
    string documentationLink?;
};

# Represents the Headers record for the operation: skillsetsCreate
public type SkillsetsCreateHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents a search index definition, which describes the fields and search behavior of an index.
public type SearchIndex record {
    # The name of the index.
    string name;
    # The description of the index.
    string description?;
    # The fields of the index.
    SearchField[] fields;
    # The scoring profiles for the index.
    ScoringProfile[] scoringProfiles?;
    # The name of the scoring profile to use if none is specified in the query. If this property is not set and no scoring profile is specified in the query, then default scoring (tf-idf) will be used.
    string defaultScoringProfile?;
    # Defines options to control Cross-Origin Resource Sharing (CORS) for an index.
    CorsOptions corsOptions?;
    # The suggesters for the index.
    Suggester[] suggesters?;
    # The analyzers for the index.
    LexicalAnalyzer[] analyzers?;
    # The tokenizers for the index.
    LexicalTokenizer[] tokenizers?;
    # The token filters for the index.
    TokenFilter[] tokenFilters?;
    # The character filters for the index.
    CharFilter[] charFilters?;
    # The normalizers for the index.
    LexicalNormalizer[] normalizers?;
    # A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be used to encrypt or decrypt data-at-rest, such as indexes and synonym maps.
    SearchResourceEncryptionKey encryptionKey?;
    # Base type for similarity algorithms. Similarity algorithms are used to calculate scores that tie queries to documents. The higher the score, the more relevant the document is to that specific query. Those scores are used to rank the search results.
    Similarity similarity?;
    # Defines parameters for a search index that influence semantic capabilities.
    SemanticSettings semantic?;
    # Contains configuration options related to vector search.
    VectorSearch vectorSearch?;
    # The ETag of the index.
    string \@odata\.etag?;
};

# Base type for tokenizers.
public type LexicalTokenizer record {
    # A URI fragment specifying the type of tokenizer.
    string \@odata\.type;
    # The name of the tokenizer. It must only contain letters, digits, spaces, dashes or underscores, can only start and end with alphanumeric characters, and is limited to 128 characters.
    string name;
};

# Represents the Queries record for the operation: indexesGetStatistics
public type IndexesGetStatisticsQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents the Queries record for the operation: getServiceStatistics
public type GetServiceStatisticsQueries record {
    # Client Api Version.
    string api\-version;
};

# A list of skills.
public type SearchIndexerSkillset record {
    # The name of the skillset.
    string name;
    # The description of the skillset.
    string description?;
    # A list of skills in the skillset.
    SearchIndexerSkill[] skills;
    # Base type for describing any Azure AI service resource attached to a skillset.
    CognitiveServicesAccount cognitiveServices?;
    # Definition of additional projections to azure blob, table, or files, of enriched data.
    SearchIndexerKnowledgeStore knowledgeStore?;
    # Definition of additional projections to secondary search indexes.
    SearchIndexerIndexProjections indexProjections?;
    # The ETag of the skillset.
    string \@odata\.etag?;
    # A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be used to encrypt or decrypt data-at-rest, such as indexes and synonym maps.
    SearchResourceEncryptionKey encryptionKey?;
};

# Represents the Queries record for the operation: indexersCreate
public type IndexersCreateQueries record {
    # Client Api Version.
    string api\-version;
};

# Base type for skills.
public type SearchIndexerSkill record {
    # A URI fragment specifying the type of skill.
    string \@odata\.type;
    # The name of the skill which uniquely identifies it within the skillset. A skill with no name defined will be given a default name of its 1-based index in the skills array, prefixed with the character '#'.
    string name?;
    # The description of the skill which describes the inputs, outputs, and usage of the skill.
    string description?;
    # Represents the level at which operations take place, such as the document root or document content (for example, /document or /document/content). The default is /document.
    string context?;
    # Inputs of the skills could be a column in the source data set, or the output of an upstream skill.
    InputFieldMappingEntry[] inputs;
    # The output of a skill is either a field in a search index, or a value that can be consumed as an input by another skill.
    OutputFieldMappingEntry[] outputs;
};

# Contains configuration options specific to the compression method used during indexing or querying.
public type VectorSearchCompressionConfiguration record {
    # The name to associate with this particular configuration.
    string name;
    # The compression method used for indexing and querying.
    VectorSearchCompressionKind kind;
    # Contains the options for rescoring.
    RescoringOptions rescoringOptions?;
    # The number of dimensions to truncate the vectors to. Truncating the vectors reduces the size of the vectors and the amount of data that needs to be transferred during search. This can save storage cost and improve search performance at the expense of recall. It should be only used for embeddings trained with Matryoshka Representation Learning (MRL) such as OpenAI text-embedding-3-large (small). The default value is null, which means no truncation.
    int:Signed32? truncationDimension?;
};

# Defines parameters for a search index that influence semantic capabilities.
public type SemanticSettings record {
    # Allows you to set the name of a default semantic configuration in your index, making it optional to pass it on as a query parameter every time.
    string defaultConfiguration?;
    # The semantic configurations for the index.
    SemanticConfiguration[] configurations?;
};

# Response from a get service statistics request. If successful, it includes service level counters and limits.
public type ServiceStatistics record {
    # Represents service-level resource counters and quotas.
    ServiceCounters counters;
    # Represents various service level limits.
    ServiceLimits limits;
};

# Represents the Queries record for the operation: indexersReset
public type IndexersResetQueries record {
    # Client Api Version.
    string api\-version;
};

# Represents a field in an index definition, which describes the name, data type, and search behavior of a field.
public type SearchField record {
    # The name of the field, which must be unique within the fields collection of the index or parent field.
    string name;
    # Defines the data type of a field in a search index.
    SearchFieldDataType 'type;
    # A value indicating whether the field uniquely identifies documents in the index. Exactly one top-level field in each index must be chosen as the key field and it must be of type Edm.String. Key fields can be used to look up documents directly and update or delete specific documents. Default is false for simple fields and null for complex fields.
    boolean 'key?;
    # A value indicating whether the field can be returned in a search result. You can disable this option if you want to use a field (for example, margin) as a filter, sorting, or scoring mechanism but do not want the field to be visible to the end user. This property must be true for key fields, and it must be null for complex fields. This property can be changed on existing fields. Enabling this property does not cause any increase in index storage requirements. Default is true for simple fields, false for vector fields, and null for complex fields.
    boolean retrievable?;
    # An immutable value indicating whether the field will be persisted separately on disk to be returned in a search result. You can disable this option if you don't plan to return the field contents in a search response to save on storage overhead. This can only be set during index creation and only for vector fields. This property cannot be changed for existing fields or set as false for new fields. If this property is set as false, the property 'retrievable' must also be set to false. This property must be true or unset for key fields, for new fields, and for non-vector fields, and it must be null for complex fields. Disabling this property will reduce index storage requirements. The default is true for vector fields.
    boolean stored?;
    # A value indicating whether the field is full-text searchable. This means it will undergo analysis such as word-breaking during indexing. If you set a searchable field to a value like "sunny day", internally it will be split into the individual tokens "sunny" and "day". This enables full-text searches for these terms. Fields of type Edm.String or Collection(Edm.String) are searchable by default. This property must be false for simple fields of other non-string data types, and it must be null for complex fields. Note: searchable fields consume extra space in your index to accommodate additional tokenized versions of the field value for full-text searches. If you want to save space in your index and you don't need a field to be included in searches, set searchable to false.
    boolean searchable?;
    # A value indicating whether to enable the field to be referenced in $filter queries. filterable differs from searchable in how strings are handled. Fields of type Edm.String or Collection(Edm.String) that are filterable do not undergo word-breaking, so comparisons are for exact matches only. For example, if you set such a field f to "sunny day", $filter=f eq 'sunny' will find no matches, but $filter=f eq 'sunny day' will. This property must be null for complex fields. Default is true for simple fields and null for complex fields.
    boolean filterable?;
    # A value indicating whether to enable the field to be referenced in $orderby expressions. By default, the search engine sorts results by score, but in many experiences users will want to sort by fields in the documents. A simple field can be sortable only if it is single-valued (it has a single value in the scope of the parent document). Simple collection fields cannot be sortable, since they are multi-valued. Simple sub-fields of complex collections are also multi-valued, and therefore cannot be sortable. This is true whether it's an immediate parent field, or an ancestor field, that's the complex collection. Complex fields cannot be sortable and the sortable property must be null for such fields. The default for sortable is true for single-valued simple fields, false for multi-valued simple fields, and null for complex fields.
    boolean sortable?;
    # A value indicating whether to enable the field to be referenced in facet queries. Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, and so on). This property must be null for complex fields. Fields of type Edm.GeographyPoint or Collection(Edm.GeographyPoint) cannot be facetable. Default is true for all other simple fields.
    boolean facetable?;
    # Defines the names of all text analyzers supported by the search engine.
    LexicalAnalyzerName analyzer?;
    # Defines the names of all text analyzers supported by the search engine.
    LexicalAnalyzerName searchAnalyzer?;
    # Defines the names of all text analyzers supported by the search engine.
    LexicalAnalyzerName indexAnalyzer?;
    # Defines the names of all text normalizers supported by the search engine.
    LexicalNormalizerName normalizer?;
    # The dimensionality of the vector field.
    int:Signed32? dimensions?;
    # The name of the vector search profile that specifies the algorithm and vectorizer to use when searching the vector field.
    string? vectorSearchProfile?;
    # The encoding format for interpreting vector field contents.
    VectorEncodingFormat vectorEncoding?;
    # A list of the names of synonym maps to associate with this field. This option can be used only with searchable fields. Currently only one synonym map per field is supported. Assigning a synonym map to a field ensures that query terms targeting that field are expanded at query-time using the rules in the synonym map. This attribute can be changed on existing fields. Must be null or an empty collection for complex fields.
    string[] synonymMaps?;
    # A list of sub-fields if this is a field of type Edm.ComplexType or Collection(Edm.ComplexType). Must be null or empty for simple fields.
    SearchField[] fields?;
};

# Represents the Headers record for the operation: dataSourcesList
public type DataSourcesListHeaders record {
    # The tracking ID sent with the request to help with debugging.
    string x\-ms\-client\-request\-id?;
};

# Represents a function that transforms a value from a data source before indexing.
public type FieldMappingFunction record {
    # The name of the field mapping function.
    string name;
    # A dictionary of parameter name/value pairs to pass to the function. Each value must be of a primitive type.
    record {}? parameters?;
};

# Represents an indexer.
public type SearchIndexer record {
    # The name of the indexer.
    string name;
    # The description of the indexer.
    string description?;
    # The name of the datasource from which this indexer reads data.
    string dataSourceName;
    # The name of the skillset executing with this indexer.
    string skillsetName?;
    # The name of the index to which this indexer writes data.
    string targetIndexName;
    # Represents a schedule for indexer execution.
    IndexingSchedule schedule?;
    # Represents parameters for indexer execution.
    IndexingParameters parameters?;
    # Defines mappings between fields in the data source and corresponding target fields in the index.
    FieldMapping[] fieldMappings?;
    # Output field mappings are applied after enrichment and immediately before indexing.
    FieldMapping[] outputFieldMappings?;
    # A value indicating whether the indexer is disabled. Default is false.
    boolean? disabled = false;
    # The ETag of the indexer.
    string \@odata\.etag?;
    # A customer-managed encryption key in Azure Key Vault. Keys that you create and manage can be used to encrypt or decrypt data-at-rest, such as indexes and synonym maps.
    SearchResourceEncryptionKey encryptionKey?;
};
